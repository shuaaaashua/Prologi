import tkinter as tk
from tkinter import messagebox, colorchooser
from tkcalendar import Calendar
import json
import os

class CalendarApp:
    def __init__(self, root):
        self.root = root
        self.root.title("My Simple Calendar")

        # Store events in a dictionary
        self.events = self.load_events()

        self.setup_ui()

    def setup_ui(self):
        """Build the user interface."""
        self.calendar = Calendar(self.root, selectmode="day", date_pattern="yyyy-mm-dd")
        self.calendar.grid(row=0, column=0, columnspan=2, padx=10, pady=10)

        tk.Label(self.root, text="Event Name:").grid(row=1, column=0, padx=10, pady=5)
        self.event_input = tk.Entry(self.root)
        self.event_input.grid(row=1, column=1, padx=10, pady=5)

        tk.Label(self.root, text="Details:").grid(row=2, column=0, padx=10, pady=5)
        self.desc_input = tk.Entry(self.root)
        self.desc_input.grid(row=2, column=1, padx=10, pady=5)

        tk.Label(self.root, text="Color:").grid(row=3, column=0, padx=10, pady=5)
        self.color_btn = tk.Button(self.root, text="Choose", command=self.pick_color)
        self.color_btn.grid(row=3, column=1, padx=10, pady=5)
        self.color = "#000000"  

        tk.Button(self.root, text="Add", command=self.add_event).grid(row=4, column=0, padx=10, pady=5)
        tk.Button(self.root, text="Delete", command=self.delete_event).grid(row=4, column=1, padx=10, pady=5)

        self.event_listbox = tk.Listbox(self.root, width=50, height=10)
        self.event_listbox.grid(row=5, column=0, columnspan=2, padx=10, pady=5)

        menu_bar = tk.Menu(self.root)
        self.root.config(menu=menu_bar)

        file_menu = tk.Menu(menu_bar, tearoff=0)
        file_menu.add_command(label="Help", command=self.show_help)
        file_menu.add_command(label="Exit", command=self.root.quit)
        menu_bar.add_cascade(label="Menu", menu=file_menu)

        self.refresh_display()

    def pick_color(self):
        color = colorchooser.askcolor(title="Pick a Color")[1]
        if color:
            self.color = color

    def add_event(self):
        date = self.calendar.get_date()
        event_name = self.event_input.get().strip()
        desc = self.desc_input.get().strip()

        if not event_name:
            messagebox.showerror("Oops!", "Enter an event name.")
            return

        if date not in self.events:
            self.events[date] = []

        self.events[date].append((event_name, desc, self.color))
        self.save_events()
        self.refresh_display()

        self.event_input.delete(0, tk.END)
        self.desc_input.delete(0, tk.END)
        self.color = "#000000"  

        messagebox.showinfo("Done!", f"Added '{event_name}' on {date}.")

    def delete_event(self):
        try:
            selected = self.event_listbox.curselection()[0]
            selected_text = self.event_listbox.get(selected).strip()

            for date, items in self.events.items():
                for event in items:
                    if selected_text == f"- {event[0]}: {event[1]}":
                        self.events[date].remove(event)
                        if not self.events[date]:
                            del self.events[date]
                        self.save_events()
                        self.refresh_display()
                        return
        except IndexError:
            messagebox.showerror("Error", "No event selected.")

    def refresh_display(self):
        self.event_listbox.delete(0, tk.END)

        if not self.events:
            self.event_listbox.insert(tk.END, "Nothing yet.")
            return

        for date, items in sorted(self.events.items()):
            self.event_listbox.insert(tk.END, f"{date}:")
            for event in items:
                event_text = f"- {event[0]}: {event[1]}"
                self.event_listbox.insert(tk.END, event_text)
                self.event_listbox.itemconfig(tk.END, {'fg': event[2]})

    def save_events(self):
        try:
            with open("events.json", "w") as file:
                json.dump(self.events, file, indent=4)
        except Exception as e:
            print(f"Error saving events: {e}")

    def load_events(self):
        if os.path.exists("events.json"):
            try:
                with open("events.json", "r") as file:
                    return json.load(file)
            except json.JSONDecodeError:
                return {}
        return {}




